datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  NOT_MENTIONED
  MALE
  FEMALE
  OTHER
}

enum RelationshipStatus {
  NOT_MENTIONED
  SINGLE
  MARRIED
  ENGAGED
  IN_A_RELATIONSHIP
}

enum Role {
  USER
  ADMIN
}

model User {
  id                 String             @id @default(cuid())
  displayName        String?            @default("")
  email              String             @unique
  emailVerified      DateTime?
  image              String?            @default("")
  bio                String             @default("")
  accounts           Account[]
  sessions           Session[]
  password           String?
  username           String?            @unique
  posts              Post[]
  postLikes          PostLike[]
  comments           Comment[]
  role               Role               @default(USER)
  isTwoFactorEnabled Boolean            @default(false)
  isOAuth            Boolean            @default(false)
  commentLikes       CommentLike[]
  gender             Gender             @default(NOT_MENTIONED)
  relationshipStatus RelationshipStatus @default(NOT_MENTIONED)
  followers          Follower[]         @relation("follower")
  following          Follower[]         @relation("following")
  // Optional for WebAuthn support
  Authenticator      Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id            String     @id @default(cuid())
  authorId      String
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  body          String?
  images        Image[]
  likes         PostLike[]
  likeCount     Int        @default(0)
  comments      Comment[]
  commentsCount Int        @default(0)
  tags          Tag[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Comment {
  id        String        @id @default(cuid())
  authorId  String
  author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  body      String
  likes     CommentLike[]
  likeCount Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model PostLike {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model CommentLike {
  id        String   @id @default(cuid())
  userId    String
  commentId String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}

model Follower {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Image {
  id        String   @id @default(cuid())
  authorId  String
  url       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Post      Post     @relation(fields: [postId], references: [id])
  postId    String
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
